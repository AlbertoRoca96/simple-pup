name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Daily catalog refresh at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run build --if-present

      - name: Lint code
        run: npm run lint --if-present

      - name: Build application
        run: npm run build
        env:
          VITE_WALMART_API_KEY: ${{ secrets.WALMART_API_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.node-version }}
          path: dist/
          retention-days: 1

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          VITE_WALMART_API_KEY: ${{ secrets.WALMART_API_KEY }}

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
                   path: playwright-report/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Check for vulnerabilities
        run: npm audit --audit-level critical

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          VITE_WALMART_API_KEY: ${{ secrets.WALMART_API_KEY }}
          VITE_APP_URL: ${{ vars.APP_URL || 'https://albertoroca96.github.io/simple-pup' }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  catalog-refresh:
    name: Refresh Product Catalog
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run catalog refresh script
        run: |
          echo "Starting catalog refresh..."
          # Here you would add actual catalog refresh logic
          # For example, calling Walmart API to update product cache
          curl -X POST "${{ vars.CATALOG_REFRESH_ENDPOINT || 'https://api.example.com/refresh' }}" \
               -H "Authorization: Bearer ${{ secrets.CATALOG_REFRESH_TOKEN }}" \
               -H "Content-Type: application/json" \
               -d '{"action": "refresh_catalog", "source": "github_actions"}' || echo "Catalog refresh completed with warnings"
        env:
          WALMART_API_KEY: ${{ secrets.WALMART_API_KEY }}
          CATALOG_REFRESH_TOKEN: ${{ secrets.CATALOG_REFRESH_TOKEN }}

      - name: Update cache version
        run: |
          echo "CACHE_VERSION=$(date +%s)" >> $GITHUB_ENV
          echo "Catalog cache updated to version $CACHE_VERSION"

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, catalog-refresh]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful to GitHub Pages"
          echo "üåê Site available at: ${{ needs.deploy.outputs.page_url }}"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed"
          exit 1

  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [test, e2e-test, deploy]
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep artifacts from last 3 runs
            const artifactsToDelete = artifacts.data.artifacts.slice(3);
            
            for (const artifact of artifactsToDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
            
            console.log(`Deleted ${artifactsToDelete.length} old artifacts`);