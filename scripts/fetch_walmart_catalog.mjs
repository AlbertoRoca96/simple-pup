import fs from 'node:fs/promises'; import path from 'node:path';
const CLIENT_ID = process.env.WALMART_CLIENT_ID; const CLIENT_SECRET = process.env.WALMART_CLIENT_SECRET; const QUERIES = (process.env.WALMART_QUERIES || 'Electric Bike').split(',').map(s => s.trim()).filter(Boolean);
const OUT = path.resolve('data/walmart_products.json'); const TOKEN_URL = 'https://marketplace.walmartapis.com/v3/token'; const SEARCH_URL = 'https://marketplace.walmartapis.com/v3/items/walmart/search';
async function getToken(){ const body=new URLSearchParams(); body.set('grant_type','client_credentials'); const res=await fetch(TOKEN_URL,{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded',Authorization:'Basic '+Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString('base64')},body}); if(!res.ok) throw new Error(`Token failed: ${res.status} ${await res.text()}`); const json=await res.json(); return json.access_token; }
function mapItem(it){ const id=String(it.itemId||it.walmartItemId||it.usItemId||it.productId||it.id||''); const name=it.name||it.productName||it.title||'Unknown Item'; const desc=it.shortDescription||it.description||''; let price=null; const candidates=[it.price,it.currentItemPrice,it.currentPrice,it.sellPrice,it.offerPrice]; for(const c of candidates){ if(!c) continue; if(typeof c==='number'){price=c;break;} if(typeof c==='string'&&!Number.isNaN(Number(c))){price=Number(c);break;} if(typeof c==='object'&&c.amount){price=Number(c.amount);break;} } const url=id?`https://www.walmart.com/ip/${id}`:''; return { id, name, price: price ?? 0, description: desc, url }; }
async function searchAll(token, query){ const params=new URLSearchParams({ query }); const res=await fetch(`${SEARCH_URL}?${params.toString()}`,{ headers:{ Authorization:`Bearer ${token}` }}); if(!res.ok) throw new Error(`Search failed: ${res.status} ${await res.text()}`); const data=await res.json(); const items=Array.isArray(data.items)?data.items:(data.data?.items||[]); return items.map(mapItem).filter(x=>x.id); }
async function main(){ if(!CLIENT_ID||!CLIENT_SECRET){ console.log('No Walmart API credentials set; skipping refresh.'); process.exit(0);} const token=await getToken(); const seen=new Map(); for(const q of QUERIES){ const rows=await searchAll(token,q); for(const r of rows) seen.set(r.id,r);} let existing=[]; try{ existing=JSON.parse(await fs.readFile(OUT,'utf8')); }catch{} for(const row of existing) if(!seen.has(row.id)) seen.set(row.id,row); const merged=Array.from(seen.values()); merged.sort((a,b)=>a.name.localeCompare(b.name)); await fs.mkdir(path.dirname(OUT),{recursive:true}); await fs.writeFile(OUT,JSON.stringify(merged,null,2)); console.log(`Wrote ${merged.length} items to ${OUT}`); }
main().catch(err=>{ console.error(err); process.exit(1); });